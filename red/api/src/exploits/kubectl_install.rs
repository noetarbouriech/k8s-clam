use axum::response::{Response, IntoResponse};
use axum::Json;
use serde_json::json;
use tokio::process::Command; // Use tokio's async Command
use reqwest::Client; // Use async reqwest
use tokio::fs::{self, File}; // Use tokio's async fs
use std::fs::Permissions; // Use std's Permissions
use std::path::Path;
use std::os::unix::fs::PermissionsExt;

const KUBECTL_VERSION: &str = "v1.29.0";

pub async fn kubectl_install() -> Result<Response, std::io::Error> {
    println!("Starting kubectl installation for Linux...");

    // Download URL
    let url = format!(
        "https://storage.googleapis.com/kubernetes-release/release/{}/bin/linux/amd64/kubectl",
        KUBECTL_VERSION
    );

    println!("Downloading kubectl from: {}", url);

    // Create temporary file
    let temp_dir = tempfile::tempdir()?;
    let temp_path = temp_dir.path().join("kubectl");

    // Download the binary (async)
    let client = Client::new();
    let response = client.get(&url).send().await
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e))?;
    
    let mut file = File::create(&temp_path).await?;
    let mut content = response.bytes().await
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e))?;
    
    tokio::io::copy(&mut content.as_ref(), &mut file).await?;

    // Set executable permissions (async)
    fs::set_permissions(&temp_path, Permissions::from_mode(0o755)).await?;

    // Installation path (default: /usr/local/bin)
    let install_path = Path::new("/usr/local/bin/kubectl");
    println!("Installing to: {}", install_path.display());

    // Move to installation location (async)
    if fs::metadata(install_path).await.is_ok() {
        fs::remove_file(install_path).await?;
    }
    fs::rename(&temp_path, install_path).await?;

    // Verify installation (async)
    println!("Verifying installation...");
    let output = Command::new("kubectl")
        .arg("version")
        .arg("--client")
        .arg("--short")
        .output()
        .await?;

    if output.status.success() {
        let success_message = format!(
            "kubectl installed successfully!\n{}",
            String::from_utf8_lossy(&output.stdout)
        );
        
        Ok(Json(json!({
            "status": "success",
            "message": success_message,
            "version": String::from_utf8_lossy(&output.stdout).trim()
        })).into_response())
    } else {
        let error_message = format!(
            "Installation verification failed: {}",
            String::from_utf8_lossy(&output.stderr)
        );
        
        Ok((
            axum::http::StatusCode::INTERNAL_SERVER_ERROR,
            Json(json!({
                "status": "error",
                "message": error_message
            }))
        ).into_response())
    }
}