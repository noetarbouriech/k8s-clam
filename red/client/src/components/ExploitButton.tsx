
import React, { useState } from 'react';
import { cn } from '@/lib/utils';
import { Bug, Shield, Zap } from 'lucide-react';

type ExploitType = 'vulnerability' | 'payload' | 'backdoor';

interface ExploitButtonProps {
  name: string;
  type: ExploitType;
  description: string;
  onExecute: () => void;
}

const ExploitButton: React.FC<ExploitButtonProps> = ({
  name,
  type,
  description,
  onExecute,
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isRunning, setIsRunning] = useState(false);
  
  const getIcon = () => {
    switch(type) {
      case 'vulnerability':
        return <Bug className="h-4 w-4" />;
      case 'payload':
        return <Zap className="h-4 w-4" />;
      case 'backdoor':
        return <Shield className="h-4 w-4" />;
      default:
        return <Bug className="h-4 w-4" />;
    }
  };
  
  const handleClick = () => {
    setIsRunning(true);
    onExecute();
    setTimeout(() => setIsRunning(false), 2000);
  };

  return (
    <div className="relative">
      <button
        className={cn(
          "w-full cyber-border bg-cyber-dark rounded-sm px-2 py-2 text-cyber-green hover:bg-cyber-green/10 transition-all flex items-center justify-between space-x-2",
          isHovered && "animate-pulse-glow",
          isRunning && "bg-cyber-green/20"
        )}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        onClick={handleClick}
        disabled={isRunning}
      >
        <div className="flex items-center space-x-2 truncate">
          {getIcon()}
          <span className="text-xs truncate">{name}</span>
        </div>
        <span className={cn("text-xs", isRunning ? "text-cyber-red" : "text-cyber-green/60")}>
          {isRunning ? "EXEC" : "RDY"}
        </span>
      </button>
      {isHovered && (
        <div className="absolute -bottom-12 left-0 w-full bg-cyber-dark border border-cyber-green/50 p-2 z-10 text-xs">
          <p className="text-cyber-text truncate">{description}</p>
        </div>
      )}
      {isRunning && <div className="scan-line"></div>}
    </div>
  );
};

export default ExploitButton;

